#!/usr/bin/env ruby
require 'yaml'

# determine input file
input_file = ARGV[0]
if input_file.nil? || input_file[0] == "-"
  abort "Usage: panrun input.md [options]\n\n"\
        'For more info, see https://github.com/mb21/panrun'
end

# determine output file
output_file = input_file + ".html"
ARGV.each_with_index do |a, i|
  if a == "-o" || a == "--output"
    output_file = ARGV[i+1]
  elsif a.start_with? "--output="
    output_file = a[9..-1]
  end
end

# determine output format
output_format = nil
ARGV.each_with_index do |a, i|
  if a == "-t" || a == "--to"
    output_format = ARGV[i+1]
  elsif a.start_with? "--to="
    output_format = a[5..-1]
  end
end
if output_format.nil?
  if output_file.nil? || !output_file.include?(".")
    abort "could not determine output format"
  else
    output_format = output_file.split(".").last
    if ["pdf", "tex"].include? output_format
      output_format = "latex"
    end
  end
end

# ask pandoc for possible options
pandoc_opts = %x(pandoc --bash-completion).scan(/opts\=\"([^"]*)/).first.first

# strip the two preceding dashes and ignore one-letter variants
pandoc_opts = pandoc_opts.split(' ').map do |o|
  if o[0..1] == "--"
    o[2..-1]
  end
end

# convert a meta-hash to an arguments-array
def get_args(meta, pandoc_opts)
  args = []
  meta.each do |key, val|
    # check whether `key` is an option that can be
    # used with the installed pandoc version
    if pandoc_opts.include? key
      opt = key
    else
      # since RMarkdown YAML uses e.g. `toc_depth` instead of `toc-depth`
      # try that as well:
      key = key.gsub('_', '-')
      if pandoc_opts.include? key
        opt = key
      end
    end

    if opt && val != false
      if val.is_a? Hash
        val.each do |k, v|
          args.push "--" ++ opt
          args.push k ++ "=" ++ v
        end
      elsif val.is_a? Array
        val.each do |v|
          args.push "--" ++ opt
          args.push v
        end
      else
        args.push "--" ++ opt
        if not (val.nil? || val.is_a?(TrueClass))
          # try to only include a value for an option that takes one
          args.push val.to_s
        end
      end
    end
  end

  if more_args = meta['pandoc_args']
    args.concat more_args
  end
  return args
end

args = if meta = YAML.load_file(input_file)["output"]
         # lookup format, else try various rmarkdown formats
         if meta_out = meta[output_format]
           get_args meta_out, pandoc_opts
         elsif meta_doc = meta[output_format + "_document"]
           get_args meta_doc, pandoc_opts
         elsif output_format == "latex" && meta_pdf = meta["pdf_document"]
           get_args meta_pdf, pandoc_opts
         elsif meta_pres = meta[output_format + "_presentation"]
           get_args meta_pres, pandoc_opts
         else
           abort "Could not find YAML key for detected output format '#{output_format}'."
         end
       else
         abort "Could not find key 'output' in YAML"
       end

args = ["pandoc", input_file] + args + ARGV[1..-1]

STDERR.puts "panrun calling: " + args.join(' ')

exec *args
